<?php
global $_cfg;
/**
 * Центральный класс
 *
 * Запускает приложение. Хранит в себе основной арсенал данных и методов:
 * настройки, часто используемые библиотеки, функцию подключения библиотек.
 * В этом классе НЕ реализован паттерн Singleton, но к классу
 * нужно обращаться так, буд-то он реализован (self::$i)
 */
$_cfg = array( // Настройки по умолчанию
	'module' => array(
		'default' => 'site/home', // Модуль запускающийся при отсутствии запроса к конкретному модулю
		'404' => 'error/404', // Модуль который вызывается если роутер не может найти нужный модуль
	),
	'template' => 'main', // Шаблон по умолчанию
);
$router; // Объект роутера

/**
 * Подключение библиотек
 *
 * Этот метод служит для подключения библиотек и модулей
 *
 * @param string $class_name Имя класса который нужно подключить
 * @param bool $return Если true - создаст и вернет объект запрашиваемого класса
 * @param string $path Папка из которой будет подключаться класс
 * @return class Если $return установлен в true - вернет объект созданного класса, если в false - ничего не вернет
 */
function lib( $class_name, $return = false, $path = LIB_FOLDER ) {
	if ( ! class_exists( $class_name ) ) { // Проверяем есть ли необходимость подключать библиотеку
		$path .= '/' . implode( '/', explode( '_', $class_name )); // Создаем путь к файлу с вызванным классом
		include( $path . '.php' );
	}

	if ( $return ) return new $class_name;
}

/**
 * Инициализация приложения
 * 
 * Создает объект приложения и передает ему настройки (вместо __construct)
 *
 * @param array $cfg Конфигурации заменяющие настройки по умолчанию
 * @return App Возвращает объект приложения
 */
// $_cfg = array_merge( $_cfg, $cfg ); // Обновляем настройки
lib( 'Route_Router' ); // Создаем объект роутера